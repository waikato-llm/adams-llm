# Project: adams
# Date: 2023-12-12 14:25:19
# User: fracpete
# Charset: UTF-8
# Modules: adams-annotator,adams-audio,adams-core,adams-docker,adams-event,adams-excel,adams-ffmpeg,adams-groovy,adams-imaging,adams-imaging-boofcv,adams-imaging-ext,adams-json,adams-math,adams-meta,adams-ml,adams-net,adams-odf,adams-opencv,adams-pdf,adams-pyro4,adams-python,adams-random,adams-rats-core,adams-redis,adams-spreadsheet,adams-terminal,adams-video,adams-visualstats,adams-weka,adams-xml,adams-yaml
#
adams.flow.control.Flow -annotation "For comparing (and cleaning up) machine translated alpaca datasets." -flow-execution-listener adams.flow.execution.NullListener -flow-restart-manager adams.flow.control.flowrestart.NullManager
 adams.flow.standalone.CallableActors
  adams.flow.sink.Display -name Log -short-title true -display-type adams.flow.core.displaytype.Default -x -3 -writer adams.data.io.output.NullWriter
 adams.flow.source.Start
 adams.flow.control.Trigger -name "prompt user"
  adams.flow.standalone.SetVariable -name "restore file" -var-name restore -var-value @{flow_filename_long}.props -value-type FILE_FORWARD_SLASHES -expand-value true
  adams.flow.source.EnterManyValues -name Parameters -stop-if-canceled true -value "adams.flow.source.valuedefinition.FileValueDefinition -name original_file -display \"Original file\" -help \"The original Alpaca dataset\" -file-chooser-title Original -extension json -use-forward-slashes true -use-absolute-path true" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name original_lang -display \"Original language\" -help \"The language of the original file\" -default-value en" -value "adams.flow.source.valuedefinition.FileValueDefinition -name translated_file -display \"Translated file\" -help \"The translated Alpaca dataset\" -file-chooser-title Translated -extension json -use-forward-slashes true -use-absolute-path true" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name translated_lang -display \"Translated language\" -help \"The language of the translated file\" -default-value mi" -value "adams.flow.source.valuedefinition.DirectoryValueDefinition -name original_output_dir -display \"Original output dir\" -help \"The directory to store the cleaned up original file in\" -file-chooser-title \"Original output\" -use-forward-slashes true -use-absolute-path true" -value "adams.flow.source.valuedefinition.DirectoryValueDefinition -name translated_output_dir -display \"Translated output dir\" -help \"The directory to store the cleaned up translated file in\" -file-chooser-title \"Translated output\" -use-forward-slashes true -use-absolute-path true" -output-type MAP -restoration-enabled true -restoration-file @{restore}
  adams.flow.transformer.MapToVariables
 adams.flow.control.Trigger -name "load original"
  adams.flow.source.Variable -var-name original_file -conversion adams.data.conversion.StringToString
  adams.flow.transformer.JsonFileReader -type ARRAY
  adams.flow.transformer.SetStorageValue -storage-name original
  adams.flow.control.Tee -name "# records"
   adams.flow.transformer.Convert -conversion adams.data.conversion.JsonArrayToArray
   adams.flow.transformer.ArrayLength
   adams.flow.transformer.SetVariable -var-name original_size
 adams.flow.control.Trigger -name "load translated"
  adams.flow.source.Variable -var-name translated_file -conversion adams.data.conversion.StringToString
  adams.flow.transformer.JsonFileReader -type ARRAY
  adams.flow.transformer.SetStorageValue -storage-name translated
  adams.flow.control.Tee -name "# records"
   adams.flow.transformer.Convert -conversion adams.data.conversion.JsonArrayToArray
   adams.flow.transformer.ArrayLength
   adams.flow.transformer.SetVariable -var-name translated_size
 adams.flow.control.ConditionalTee -name "same size?" -condition "adams.flow.condition.bool.Expression -expression \"@{original_size} != @{translated_size}\""
  adams.flow.control.Stop -stop-msg "Number of entries differ (original vs translated): @{original_size} != @{translated_size}"
 adams.flow.control.ConditionalTee -name "same output file?" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{original_output_file}\\\\\\\" = \\\\\\\"@{translated_output_file}\\\\\\\"\""
  adams.flow.control.Stop -stop-msg "Output file names are the same (original and translated): @{original_output_dir}"
 adams.flow.control.Trigger -name "what record to start with?"
  adams.flow.standalone.SetVariable -name "restore file" -var-name restore -var-value @{flow_filename_long}-from_record.props -value-type FILE_FORWARD_SLASHES -expand-value true
  adams.flow.source.EnterManyValues -stop-if-canceled true -message "Please enter the record number to start the review with (1-@{original_size}):" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name from_record -display Start -help \"The 1-based index of the record to start the review with\" -type INTEGER -default-value 1" -output-type MAP -restoration-enabled true -restoration-file @{restore}
  adams.flow.transformer.MapToVariables
  adams.flow.control.ConditionalTee -name "start <= total # records?" -condition "adams.flow.condition.bool.Expression -expression \"@{from_record} > @{original_size}\""
   adams.flow.control.Stop -stop-msg "Start (@{from_record}) is larger than # of records (@{original_size})!"
 adams.flow.control.Tee -name initialize
  adams.flow.control.Trigger -name original
   adams.flow.source.NewCollection
   adams.flow.transformer.SetStorageValue -storage-name original_clean
  adams.flow.control.Trigger -name translated
   adams.flow.source.NewCollection
   adams.flow.transformer.SetStorageValue -storage-name translated_clean
 adams.flow.control.Tee -name "output files"
  adams.flow.control.Trigger -name original
   adams.flow.source.Variable -var-name original_file -conversion adams.data.conversion.StringToString
   adams.flow.transformer.BaseName
   adams.flow.transformer.Convert -conversion "adams.data.conversion.ReplaceFileExtension -extension -@{from_record}.json -use-forward-slashes true"
   adams.flow.transformer.PrependDir -prefix @{original_output_dir} -use-forward-slashes true
   adams.flow.transformer.SetVariable -var-name original_output_file
  adams.flow.control.Trigger -name translated
   adams.flow.source.Variable -var-name translated_file -conversion adams.data.conversion.StringToString
   adams.flow.transformer.BaseName
   adams.flow.transformer.Convert -conversion "adams.data.conversion.ReplaceFileExtension -extension -@{from_record}.json -use-forward-slashes true"
   adams.flow.transformer.PrependDir -prefix @{translated_output_dir} -use-forward-slashes true
   adams.flow.transformer.SetVariable -var-name translated_output_file
 adams.flow.control.Trigger -name process
  adams.flow.source.ForLoop -lower @{from_record} -upper @{original_size}
  adams.flow.transformer.SetVariable -var-name index
  adams.flow.transformer.SetVariable -name "SetVariable (4)" -var-name zero_index -var-value @{index}-1 -value-type MATH_EXPRESSION_ROUND -expand-value true
  adams.flow.transformer.SetVariable -name "SetVariable (3)" -var-name index_path -var-value $[@{zero_index}] -expand-value true
  adams.flow.transformer.SetVariable -name "SetVariable (2)" -var-name accepted -var-value false
  adams.flow.control.Trigger -name "original record"
   adams.flow.source.StorageValue -storage-name original -conversion adams.data.conversion.UnknownToUnknown
   adams.flow.transformer.GetJsonValue -path @{index_path}
   adams.flow.transformer.SetStorageValue -storage-name original_record
   adams.flow.control.Tee -name instruction
    adams.flow.transformer.GetJsonValue -path instruction -data-type STRING
    adams.flow.transformer.SetVariable -var-name instruction
   adams.flow.control.Tee -name input
    adams.flow.transformer.GetJsonValue -path input -data-type STRING
    adams.flow.transformer.SetVariable -var-name input
   adams.flow.control.Tee -name output
    adams.flow.transformer.GetJsonValue -path output -data-type STRING
    adams.flow.transformer.SetVariable -var-name output
   adams.flow.control.Trigger -name assemble
    adams.flow.source.CombineVariables -expression INSTRUCTION\n@{instruction}\n\nINPUT\n@{input}\n\nOUTPUT\n@{output} -conversion adams.data.conversion.StringToString
    adams.flow.transformer.SetVariable -var-name original_str
  adams.flow.control.Trigger -name "translated record"
   adams.flow.source.StorageValue -storage-name translated -conversion adams.data.conversion.UnknownToUnknown
   adams.flow.transformer.GetJsonValue -path @{index_path}
   adams.flow.transformer.SetStorageValue -storage-name translated_record
   adams.flow.control.Tee -name instruction
    adams.flow.transformer.GetJsonValue -path instruction -data-type STRING
    adams.flow.transformer.SetVariable -var-name instruction
   adams.flow.control.Tee -name input
    adams.flow.transformer.GetJsonValue -path input -data-type STRING
    adams.flow.transformer.SetVariable -var-name input
   adams.flow.control.Tee -name output
    adams.flow.transformer.GetJsonValue -path output -data-type STRING
    adams.flow.transformer.SetVariable -var-name output
   adams.flow.control.Trigger -name assemble
    adams.flow.source.CombineVariables -expression INSTRUCTION\n@{instruction}\n\nINPUT\n@{input}\n\nOUTPUT\n@{output} -conversion adams.data.conversion.StringToString
    adams.flow.transformer.SetVariable -var-name translated_str
  adams.flow.control.Trigger -name "prompt user"
   adams.flow.source.CombineVariables -expression "record no: @{index}\\n-------------------------------------------------------\\noriginal:\\n-------------------------------------------------------\\n@{original_str}\\n\\n-------------------------------------------------------\\ntranslated:\\n-------------------------------------------------------\\n@{translated_str}\\n" -conversion adams.data.conversion.StringToString
   adams.flow.control.Inspect -provider "adams.flow.sink.Display -display-type adams.flow.core.displaytype.Default -font SansSerif-PLAIN-12 -always-clear true -writer adams.data.io.output.NullWriter -line-wrap true -wrap-style-word true"
   adams.flow.transformer.SetVariable -var-name accepted -var-value true
  adams.flow.control.ConditionalTee -name accepted? -condition "adams.flow.condition.bool.Expression -expression \"@{accepted} = true\""
   adams.flow.control.Tee -name append
    adams.flow.control.Trigger -name "append original"
     adams.flow.source.StorageValue -storage-name original_clean -conversion adams.data.conversion.UnknownToUnknown
     adams.flow.transformer.CollectionInsert -object-storage original_record -after true
    adams.flow.control.Trigger -name "append translated"
     adams.flow.source.StorageValue -storage-name translated_clean -conversion adams.data.conversion.UnknownToUnknown
     adams.flow.transformer.CollectionInsert -object-storage translated_record -after true
   adams.flow.control.Tee -name "save records"
    adams.flow.control.Trigger -name original
     adams.flow.source.StorageValue -storage-name original_clean -conversion adams.data.conversion.ListToJsonArray
     adams.flow.sink.JsonFileWriter -output @{original_output_file} -pretty-printing true
    adams.flow.control.Trigger -name translated
     adams.flow.source.StorageValue -storage-name translated_clean -conversion adams.data.conversion.ListToJsonArray
     adams.flow.sink.JsonFileWriter -output @{translated_output_file} -pretty-printing true
  adams.flow.control.Trigger -name log
   adams.flow.standalone.SetVariable -var-name result -var-value "if(@{accepted}, \\\"OK\\\", \\\"--\\\")" -value-type STRING_EXPRESSION -expand-value true
   adams.flow.source.CombineVariables -expression "@{index}: @{result}" -conversion adams.data.conversion.StringToString
   adams.flow.sink.CallableSink -callable Log